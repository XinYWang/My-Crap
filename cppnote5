c++程序设计（北京大学）Lecture Notes --5
------------------------------------------------------------
------------------------------------------------------------
31. 标准模版库STL概述
	常用的数据结构和算法的模版的集合（泛型程序设计）
	容器： 可容纳各种数据结构类型的通用数据结构，是类模版
		顺序容器：动态数组vector, 双向队列deques, 双向列表list
		关联容器：set, multiset, map, multimap
		容器适配器: 栈stack, 队列queue, 优先队列priority_queue
		对象插入容器中时，实际上被插入的是对象的一个复制品，有的容器本身是排序的，有的算法要求对容器中的元素进行比较，所以放入容器的对象所属的类，往往应该重载== and < 运算符
	迭代器：可用于依次存取容器中元素，类似于指针
	算法：用于操作容器中元素的函数模版
	-----------------------------------------------------------
	顺序容器：非排序的
		vector 头文件 <vector>
		deque 头文件 <deque> 有队头和队尾指针，随机存取元素所需时间大于vetor，存在 A7 *tail *head A0 A1 A2 A3 A4 A5 A6情况，这样随即存取元素地址就有些麻烦
		list 头文件<list> 元素在内存不连续存放，在寻找到后任何位置删除元素都可以在常数时间完成，不支持随机存取
	关联容器：元素是排序的，插入任何元素都可以按照相应的排序规则来确定其位置，在查找时具有非常好的性能，通常以平衡二叉树实现，插入和检索的时间都是O(logN)
		set/multiset 集合，头文件<set> set中不允许相同元素，multiset可以
		set/muptimap  头文件<map> map与set的不同在于map中存放的元素有且仅有两个成员变量，一个是first，一个是second，map根据first值对元素进行从小到大排序，并可以根据first快速来检索元素。map中不允许有相同first值的元素，multimap中可以
	容器适配器：
		stack,栈，后进先出，bottom, top，出栈入栈
		queue，队列，单向，先进先出，插入只可以在尾部进行，删除，检索和修改只允许从头部进行
		priority_queue，优先级元素总是位于队列头部，第一个出列，优先级可以自己定义
	顺序容器和关联容器中都有的成员函数：begin/rbegin返回指向容器中第一个/最后一个元素的迭代器 end/rend返回指向容器中最后一个元素后面/前面位置的迭代器 erase删除个别元素 clear清空所有元素
	顺序容器中常用的成员函数：front/back（返回容器中第一个/最后一个元素的引用）push_back/pop_back（在容器末尾增加/删除元素）erase（删除迭代器指向的元素，或删除一个区间，返回被删除元素后面的那个元素的迭代器）
	
	迭代器：用于指向顺序容器和关联容器中的元素，用法近似指针，有const和非const两种，通过迭代器可以读取指和向它的元素，通过非const迭代器还能修改其指向的元素
		定义一个容器类的迭代器的方法：容器类名::iterator 或const_iterator 变量名；
		访问一个迭代器指向的元素： *迭代器变量名
		迭代器可以执行++操作，指向容器的下一个元素
		#include<vector>
		#include<iostream>
		using namespace std;
		int main(){
			vector<int> v;  //一个存放int元素的数组，一开始里面没有元素
			v.push_back(1);
			vector<int> :: const_iterator i;  //vector的常量迭代器
			for(i=v.begin(); i!=v.end(); ++i)  //遍历v的所有元素
				cout<< *i << ","	//输出
			vector<int> :: reverse_iterator i;  //vector的反向迭代器
			for(i=v.rbegin(); i!=v.rend(); ++i)  //反向遍历v的所有元素
				cout<< *i << ","	//输出
			vector<int> :: iterator i;  //vector的非常量迭代器
			for(i=v.begin(); i!=v.end(); ++i)  //遍历v的所有元素
				cout<< *i << ","	//输出
			cout << endl;
		}
		双向迭代器，若p和p1都是双向迭代器，那么，
			++p，p++	//使p指向容器中下一个元素
			--p.p--		//使p指向容器中上一个元素	
			*p		//取元素
			p=p1		//赋值
			p == p1, p!=p1 	//判断等还是不等
		随机迭代器，可以完成双向迭代器的所有操作
			p+=i / p-=i	//将p向后移动i个元素
			p+i / p-i	//指向p后面/前面第i个元素的迭代器
			p[i]		//p后面第i个元素的引用
			p < p1, p>p1, p>=p1, p<=p1 //所指向的元素的位置比较，
	顺序容器中都是随机迭代器，关联容器中都是双向迭代器，容器适配器不支持迭代器
	有的算法如sort，binary_search需要通过随机访问迭代器来访问容器中的元素，那么关联容器就不支持该算法
	遍历vector： vector<int> v(100); int i; for(i=0; i<v.size();++i) cout << v{i}; //根据下标随机访问
	遍历list： list<int> v; list<int>::const_iterator ii; for(ii=v.begin(); ii!=v.end(); ++v) cout<< *ii;
		//双向迭代器不支持<, 只能写！=，list没有[]成员函数没有v[i]
	
	算法是一个个函数模版，大多在头文件<algorithm>中定义。算法比如排序和查找可以通过两个迭代器，一个是起始元素的迭代器，一个是终止元素后面一个元素的迭代器，对容器中的一个局部区间进行操作。算法可以工作在容器上，也可以作用于普通数组上
		template<class inlt, class T>
		inlt find(inlt first, inlt last, const T& vak); // first和last都是容器的迭代器，给出左闭右开的区间，find在[first,last)查找等于val的元素，用==判断相等，函数返回值是一个迭代器，如果找到则该迭代器指向被找到的元素，如果找不到则该迭代器等于last
		#include<vector>
		#include<algorithm>
		#include<iostream>
		using namespace std;
		int main(){
			int array[10] = {1,2,3,4};
			vector<int> v;
			v.push_back(2);
			vector<int> :: iterator p;
			p = find(v.begin(), v.end(),3);  //在整个容器查找3这个元素， v.end()指向最后一个元素后面的一个元素，因此没有指向任何元素
			if(p != v.end) 
				cout << *p << endl; 
			int *pp = find(array, array+4, 20); //数组名是迭代器
			cout << *pp << endl;
		}
	STL中“大”和“小”的概念：
		关联容器内部元素是从小到大来排序的
		有些算法如binary_search要求区间是从小到大排序的，排序算法会对区间进行从小到大排序（可自定义大小概念）
		在自定义说法缺省情况下，x小于y， 表达式x<y为真，y大于x，三者等价
		关联容器自身带有成员函数find来进行查找
		有时，“x和y相等” 等价于“x == y;”为真，有时等价于“x小于y和y小于x同时为假”(如在binary_search中)
		#include<algorithm>
		#include<iostream>
		using namespace std;
		class A {
			int v;
		public:
			A(int n):v(n){}
			bool operator < (const A& a2) const{
				return false;
			}
			bool operator == (const A& a2) const{
				return v == a2.v;
			}
		}
		int main () {
			A a[] = {A(1),A(2),A(3),A(4),A(5)};
			cout << binary_search (a, a+4, A(9));
			return 0;		
		}

32. vector
	随机访问迭代器，根据下标随机访问某个元素时间为常数，在尾部添加速度很快，在中间插入慢
	vector的成员函数：
		构造函数初始化： vector(); vector(int n); 
				vector(int n ,const T& val)；//假定元素类型是T，将容器初始化成有n个元素，每个元素的值都是val
				vector(iterator first, iterator last)//将容器初始化为与另外一个的容器上区间[first, last)一致的内容
		void pop_back();    	//删除容器末尾的元素
		void push_back();	//将val添加到容器末尾
		int size;		//返回容器中元素的个数
		T& font();		//返回容器中第一个元素的引用
		T& back();		//返回容器中最后一个元素的引用
	
	vector<int> v(5);
	cout << v.end() - v.begin() <<end; //返回两个迭代器的相减值，即容器的大小5
	v.at(4) = 100;
	int a[5] = {1,2,3,4,5};
	vector<int> v2(a, a+5);  //第四种构造函数
	v2.insert(v2.begin()+2, 13); //在begin()+2位置插入13
	-------------------------------------------------------------
	二维动态数组 vector<vector<int>> v(3); // v有3个元素，每个元素都是vector<int>容器
		for(int i=0; i< v.size(); ++i)
			for(int j=0; j<4; ++j)
				v[i].push_back(j);
		for(int i=0; i< v.size(); ++i)
			for(int j=0; j<v[i].size; ++j)
				cout << v[i][j] << "";
			cout << endl;
	--------------------------------------------------------------

33. list and deque
	双向链表list 不支持根据下标随机存取元素，具有所有顺序容器都有的成员函数
	重要的8个成员函数：
		push_front	//在链表最前面插入
		pop_front	//删除链表最前面的元素
		sort		//排序（list不支持STL的算法sort）
		remove		//删除和指定值相等的所有元素
		unique		//删除所有和前一个元素相同的元素
		merge		//合并两个链表，并清空被合并的链表
		reverse		//颠倒
		splice		//在指定位置前面插入另一链表中的一个或多个元素，并在另一链表中删除被插入的元素
	list自己的sort成员函数: list<T> classname  classname.sort(compare); //compare函数可以自己定义
				classname.sort(); //无参数版本，按<排序算法会对区间进行从小到大排序	
	list不支持大于/小于比较运算符，[]运算符和随机移动（即类似list的迭代器+2的操作）
		
		#include<list>
		#include<iostream>
		#include<algorithm>
		using namespace std;
		class A{
		private: int n;
		public:
			A(int n_) {n = n_;}
			friend bool operator< (const A& a1, const A& a2 );
			friend bool operator== (const A& a1, const A& a2 );
			friend bool operator<< (ostream &o, const A& a );
		};
		bool operator< (const A&a1, const A&a2){
			return a1.n < a2.n;
		}
		bool operator== (const A&a1, const A&a2){
			return a1.n == a2.n;
		}
		bool operator<< (const A&a1, const A&a2){
			o << a.n;			
			return o;
		}

		template<class T>
		void PrintList(const list<T> &lst){
			int tmp = lst.size();
			if(tmp > 0){
				typename list<T> :: const_iterator i; //typename用来说明list<T>::const_iterator是个类型，在VS中可以不写
				i = lst.begin();
				for(i = lst.begin(); i!=lst.begin(); ++i)
					cout << *i << ".";
			}
		} 

		int main(){
			list<A> lst1,lst2;
			lst1.push_back(1); 
			lst2.push_back(10);
			PrintList(lst1);
			lst2.sort(); 	// 对自身排序
			PrintList(lst2);
			lst2.pop_front();
			lst1.remove(2);	//删除所有和A(2)相等的元素
			lst2.unique();	//删除所有和前一个元素相等的元素
			lst1.merge(lst2);	//合并lst2到lst1并清空lst2
			lst1.reverse();
			list<A>::iterator p1, p2, p3;
			p1 = find(lst1.begin(), lst1.end(), 3);
			p2 = find(lst2.begin(), lst2.end(), 200);
			p3 = find(lst2.begin(), lst2.end(), 200); // lst2中从开始到结束，200这个元素的迭代器
			lst1.splice(p1, lst2, p2, p3); // 将[p2, p3)插入p1之前，并从lst2中删除[p2, p3)
		}

	deque 双向队列， 所有适用于vector的操作都是用于deque，还有push_front 和 pop_front操作

34. 函数对象
	若一个类重载了运算符"()",则该类的对象就成为了函数对象
		class CMyAverage{
		public:
			double operator() (int a1, int a2, int a3){
				return (double)(a1 + a2 + a3)/3;
			}		
		};
		CMyAverage average; // 函数对象
		cout << average(3,2,3) << endl;
		----------------------------------------------------
	#include<vector>
	#include<iostream>
	#include<algorithm>
	#include<numeric>
	#include<functional>
	using namespace std;
	int SumSquares(int total, int value){
		return total + value*value;
	}
	template <class T>
	void PrintInterval(T first, T last){
		for(; first != last; ++first)
			cout << *first << ""
		cout << endl;
	}
	template <class T>
	class SumPowers{
	private: int power;
	public: 
		SumPowers(int p): power(p){}
		const T operator() (const T& total, const T& value){
			T v= value;
			for(int i=0; i<power-1; ++i)
				v = v*value;
			return total + v;
		}
		
	};
	int main(){
		const int SIZE = 10;
		int a1[] = {1,2,3,4,5,6,7,8,9,10};
		vector<int> v(a1, a1+SIZE);
		PrintInterval(v.begin(), v.end());
		int result = accumulate(v.begin(), v.end(), 0 , SumSquares<int>(3)); //求出这个临时函数对象所有元素的立方和
	}
	-----------------------------------------------------------------------------------------------	
	STL中的函数对象类模版： 可以用来生成函数对象，equal_to, greater, less... 头文件<functional>
	greater函数对象类模版：
		template<class T>
		struct greater : public binary_function<T,T, bool>{
			bool operator() (const T& x, const T& y) const{ return x > y;}
		};
		list有两个sort成员函数，1）void sort(); // 按照<,升序排列
		2)template<class Compare> void sort(Compare op); // 将list中各元素按照op规定的比较方法升序排列
		-------------------------------------------------------------
		class MyLess{
		public:
			bool operator() (const int& c1, const int& c2){ return (c1%10) < (c2%10);}
		};
		template<class T>
		void Print(T first, T last){
			for(; first!=last; ++first)  cout << *first << ",";
		}
		int main(){
			const int SIZE = 5;
			int a[SIZE] = {5,21,14,2,3};
			list<int> lst(a, a+SIZE);
			lst.sort(MyLess());// 参数是临时函数对象MyLess()，由这个类里面的()成员函数决定的排序规则
			Print(lst.begin(), lst.end());
			cout << endl;
			lst.sort(greater<int> ());//greater<int>()是个临时函数对象，比大小的规则变成了greater决定的，降序排列
		}

35. set and multiset 关联容器
	除了各容器都有的函数外，还支持成员函数：
		iterator find(const T& val);			//查找等于某个值的函数
		iterator lower_bound/upper_bound((const T& val);	//查找上界/下界,一个最大的位置it,使得[begin(),it)区间中所有元素都比val大或者小
		pair<iterator,iterator> equal_range(const T& val)	//同时查找上界和下界
		int count(const T& val)			//计算等于某个值的元素个数
		iterator insert((const T& val)			//用以插入一个元素并返回其迭代值
		void insert((iterator first, iterator last)	////将区间[first，last)插入容器
		iterator erase(iterator it);		//删除it指向的元素，返回其后面元素的迭代器
	pair模版: template<class _T1, class _T2>
		struct pair{
			typedef _T1 first_type;
			typedef _T2 second_type;
			_T1 first;
			_T2 second;
			pair(): first(), sencond() {}  //第一个无参构造函数
			pair(const _T1&_a, const _T2&_b): first(_a), second(_b){}  //第二个复制构造函数
			template<class _U1, class _U2>
			pair(const pair<_U1, _U2>& _P): first(_p.first), second(_p.second){} //第三个构造函数
		}
	map/multimap容器里放着的都是pai模版类的对象，且按first从小到大排序
	第三个构造函数用法： pair<int, int>  p(pair<double, double>(5.5,4.6)) //一个临时对象去初始化p，p.first=5,p.second = 4
		
	multiset: 定义
		template<class Key, class Pred = less<Key>, class A=allocator<Key>>
		class multiset{...};
		Pred类型的变量决定了multiset中的元素“一个比另一个小”是怎么定义的。 Pred的缺省类型是less<Key>
			less模版的定义： template<class T>
				struct less: public binary_function<T, T, bool>
				{bool operator() (const T& x, const T&y) {return x<y;}const;};

		#include <set>
		#include <iostream>
		using namespace std;
		template<class T>
		void Print(T first, T last){
			for(; first!=last; ++first) 
				cout<<*first<<"";
			cout << endl;
		}
		class A{
		private: int n;
		public: A(int n_) {n = n_;}
		friend bool operator< (const A& a1, const A& a2){return a1.n < a2.n;}
		friend ostream& operator<< (ostream& o, const A& a2){o<<a2.n, return o;}
		friend class MyLess;
		};
		struct MyLess{
			bool operator() (const A& a1, const A& a2) {return (a1.n%10) < (a2.n % 10);}
		};
		typedef multiset<A> MSET1;	// 把mulstiset<A> 重新命名为MSET1，用"<"比大小
		typedef multiset<A, MyLess> MSET2; //MSET2用MyLess::operator()比大小
		int main(){
			const int SIZE = 6;	
			A a[SIZE] = {4, 22, 19,8,33,40};
			MSET1 m1;
			m1.insert(a, a+SIZE);
			m1.insert(22);
			MSET::iterator pp = m1.find(19);
			if(pp != m1.end())
				cout << "found" <<endl;
			cout << *m1.lower_bound(22) << "," << *m1.upper_bound(22) << endl;
			pp = m1.erase(m1.lower_bound(22), m1.upper_bound(22)); //这个左闭右开区间的元素都删掉
			count << m1.count(22) << endl;
			count << Print(m1.beging(), m1.end());
			MSET2 m2; 
			m2.insert(a, a+SIZE);  //MSET2里比大小的规则是个位数从小到大排序	
		}
	set: 不能有重复元素，插入set中已有的元素，那么忽略插入
		int main(){
			typedef set<int>::iterator IT;
			int a[5] = {3,4,5,1,2};
			set<int> st(a, a+5);	//直接小于号排序 1 2 3 4 6
			pair<IT,bool>result;	//成员变量first是IT， 成员变量second是bool类型
			result = st.insert(5);	
			if(result.second)	//插入函数返回值的bool变量
				cout << *result.first <<"inserted" << endl;
			if(st.insert(5).second)
				cout << *result.first << endl;
			else cout << *result.first << "already exists" << endl;
			pair<IT, IT> bounds = st.equal_range(4);//range返回值也是一个pair对象，两个成员变量是迭代器，最靠右边和最靠左边的迭代器，从这个迭代器开始往右或者左，都比4大
			cout << *bound.first << "," << *bounds.second;
			return 0;
 		}	

36. map and multimap
	map/multimap里放着的都是pair模版类的对象，且按照first从小到大排序
	multimap 定义: template<class Key, class T, class Pred = less<Key>, class A = allocator<T>>
			class multimap{
				......
				typedef pair<const Key, T> value_type;
				...... 		
			}
		multimap中的元素都是由<关键字，值>组成，每个元素是一个pair对象，关键字就是first成员变量，其类型是Key。 multimap中允许多个元素的关键字相同，元素按照first成员变量从小到大排列，缺省情况下用less<Key>定义关键字的小于关系
	#include<iostream>
	#include<map>
	using namespace std;
	int main(){
		typedef multimap<int, double, less<int>> mmid;
		mmid pairs;
		pairs.insert(mmid::value_type(15, 2.7)); //typedef pair<const Key, T> value_type; 生成了一个mmid:value_type模版类的临时对象
		for(mmid::const_iterator i = pairs.begin(); i!=pairs.end(); ++i)
	}
	例题：学生成绩录入和查询系统
		#include<iostream>
		#include<map>
		#include<string>
		using namespace std;
		class CStudent{
		public: 
			struct CInfo{		//类的内部类
				int id;
				string name;			
			}
			int score;
			CInfo info;		//CInfo的对象
		}
		typedef multimap<int, CStudent::CInfo> MAP_STD //内部类的使用方法，MAP_STD是一个multimap容器，里面每一个元素都是pair类模版的对象，它的第一个成员函数是整型的，second成员变量是CInfo类型的，关键字比大小的方法缺省，用小于号
		int main(){
			MAP_STD mp;
			CStudent st;
			string cmd;
			while(cin >> cmd){
				if(cmd == "ADD"){
					cin >> st.info.name >> st.info.id >> st.score;
					mp.insert(MAP_STD:: value_type(st.score, st.info));
				}
				else if(cmd == "Query"){
					int score;
					cin >> score;
					MAP_STD :: iterator p = mp.lower_bound(score);
					if(p!= mp.begin()){
						--p;
						score = p->first;	//比要查询分数低的最高分
						MAP_STD :: iterator maxp = p;
						int maxld = p->second.id;
						for(; p!=mp.begin() && p->first == score; --p){
							//遍历所有成绩和score相等的学生
							if(p->second.id > maxld){
							  maxp = p;
							  maxld = p-> second.id;			
							}
						}
						if(p->first == score){
							//如果上面循环是因为p==mp.begin()而终止，则p还要处理
							if(p->second.id > maxld){
							  maxp = p;
							  maxld = p-> second.id;
							}
						}
						cout << maxp->score.name << "" << maxp->second.id << "" << maxp->first << endl;
					}
					else 	//lower_bound的结果就是begin
						cout << "Nobody" <<endl;
				}
			}
			return 0;
		}
		关联容器特别适用于不断更新数据，不断查询的情况，增加和删除复杂度都是log(N)

	map: map中的元素都是pair模版类对象，但是关键字（first成员变量）各不相同
		map的[]成员函数： 若pairs为模版类的对象，pairs[Key]返回对关键字等于Key的元素的值的引用。若没有关键字为Key的元素，则会王pairs里插入一个关键字为key的元素，其值用无参构造函数初始化，并返回其值的引用
			如： map<int, double> pairs  pairs[50]=5; 会修改pairs中关键字为50的元素，使其second值变成5，若不存在关键字等于50的元素，则插入此元素，并使其值变为5
		pairs.insert(make_pair(15, 99.3)); //make_pairs生成一个pair对象

37. 容器适配器，
	可以用某种顺序容器来实现，让已有的顺序容器以栈/队列的方式工作
		1）stack: include<stack> 后进先出
		2) queue: include<queue> 先进先出
		3）priority_queue: include<queue> 优先级队列，最高优先级元素首先出列
	都有三个成员函数： push: 添加一个元素
			top: 返回栈顶部或队头元素的引用
			pop: 删除一个元素
	容器适配器上没有迭代器
	STL中各种排序，查找，变序等算法都不适用于容器适配器
	
	stack:
		只能插入void push(const T& X)，删除void pop()，访问栈顶T& top()的元素，可用vectir,list,deque来实现（用vector和deque实现比用list实现性能好）
		template<class T, class Cont=deque<T>>
		class stack{};
	queue: 
		可以用list和deque实现，缺省情况下用deque实现
		push发生在队尾，pop和top发生在队头，先进先出
	priority_queue:
		可以通过vector和deque实现，缺省情况下用vector实现，通常用堆技术实现，保证最大的元素总在最前面，但不保证内部元素是有序的，不允许对队头元素进行修改，默认的元素比较器是less<T>
		执行pop操作时，删除的是最大的元素，执行top操作时，返回的是最大元素的引用
		priority_queue<double> priorities;	
		priorities.push(3.2);	
		while(!priorities.empty()){
			cout << priorities.top() << "";
			priorities.pop();S
		}

38. STL算法：不变序列算法，变值算法，删除算法，变序算法，排序算法，有序区间算法，数值算法
	大多重载的算法有两个版本:
		1. 用==判断元素是否相等，或用<来比较大小 iterator min_element(iterator first, iterator last)
		2. 多出一个类型参数Pred和函数形参 Pred op，通过表达式op(x,y)的布尔返回值判断x和y的大小关系
			iterator min_element(iterator first, iterator last, Pred op); //op的实参可以给函数的名字或者函数对象,不一定是数学意义上的大和小

	1）不变序列算法
		不改变算法作用的容器或者对象，适用于顺序和关联容器。时间复杂度都是O(n)
		如： min, max, min_element, max_element, for_each, count, count_if, find, find_if, for_each
		find_if:
		template<class inlt, class Pred>		
		find_if(inlt first, inlt last, Pred pr); //查找复合某种条件的元素，返回区间[first, last)中的迭代器i，使得pr(*i)==true
		min_element: 
		template<class Fwdlt>
		Fwdlt min_element(Fwdlt first, Fwdlt last); //返回区间[first, last)中最小元素的迭代器，以<作比较器，最小指没有元素比它小，而不是它比任何元素都小
	
	2）变值算法
		会修改目标区间元素的值，值被修改的区间不可以是属于关联容器的（破坏了关联容器的有序性）
		for_each, copy, copy_backward, transform, swap_ranges, fill, generate, replace, replace_copy
		ostream_iterator<int> output(cout, "");
		random_shuffle(v.begin(), v.end()); //打乱vector v里元素顺序
		copy(v.begin(), v.end(), output);
		copy(a2, a2+SIZE, v.begin()); //要求目标区间必须有足够多的空间，否则数组越界出错
		vector<int> cubes(SIZE);
		transform(a1, a1+SIZE, cubes.begin(), calculateCube);

	3）删除算法
		删除一个容器里的某些元素，把被删除的元素看作空位子，最后没有填充的空位子保持原有值不变，不会使容器里的元素减少，删除算法不应该作用于关联容器
		如：remove, remove_if, unique(删除区间中连续相等的元素，只留下一个) 算法复杂度都是O(n)	
		remove(v.begin(), v.end(), 2); {1,2,3,2,5,6} --> {1,3,5,6,5,6}

	4) 变序算法
		改变容器中元素的顺序但不改变值，不适用于关联容器，算法复杂度都是O(n)
		如： reverse（颠倒区间）, next_permutation(将区间改为下一个排列，排列有大小顺序,找下一个大的排列), prev_pemutation, random_shuffle
		string str = "231";
		while(next_permutation(str.begin(), str.end()))  cout << str << endl; //输出：312, 321
		int a[] ={8,7,10};
		list<int> ls(a, a+3);
		while(next_permutation(ls.begin(), ls.end())){
			list<int>::iterator i;
			for(i=ls.begin(); i!=ls.end(); ++i)
				cout << *i << "";
			cout << endl;   
	5) 排序算法
		复杂度通常是O(nlogn),不适用于关联容器和list（需要随机迭代器）
		如：sort(可自定义排序器小), stable_sort(归并排序，保持相等元素之间的先后次序)
		sort(a, a+5, greater<int>()); //实际上是快速排序，平均性能最优
		
	6）有序区间算法
		所操作的空间必须已经从小到大排序好，需要随机访问迭代器，不适用于关联容器和list
		如：binary_search(O(logn)), lower_bound(O(logn)), upper_bound(O(logn)), equal_range(O(logn)), merge(O(n))，includes(判断第二个区间的每个元素都在区间一中)
	
	bitset类模版，存放很多标志位 template<size_t N> class bitset{...}; bitset<40> bst; 可以通过很多成员函数修改访问任意一位bit，可以位运算
		
