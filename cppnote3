c++程序设计（北京大学）Lecture Notes --3
------------------------------------------------------------
------------------------------------------------------------
21. 虚函数和多态
	virtual只用在类定义里的函数声明中，写函数体时不用，构造函数和静态成员函数不能是虚函数。虚函数可以参与多态，普通成员函数不可以。多态可以增强程序的可扩充性，即当需要修改或增加功能时，需要改动和增加的代码较少。
	多态的表现形式：
	1. 通过基类指针调用基类和派生类中的同名虚函数时，该指针指向基类或者派生类的对象，那么调用的则是对应类的虚函数，这是基于派生类的指针可以赋给基类指针。
		int main(){
			CDerived ODericed;
			CBase *p = &ODerived;
			p -> SomeVirtualFunction();  //调用哪个虚函数取决于P指向哪种类型的对象，此时是派生类
			return 0;
		}	
	2. 派生类的对象可以赋值给基类引用。通过基类引用调用基类和派生类中的同名虚函数时，该引用引用的是哪个类的对象，那么被调用的则是该类的虚函数。
		int main(){
			CDerived ODericed;
			CBase &r = ODerived;
			r.SomeVirtualFunction();  //调用哪个虚函数取决于r引用哪种类型的对象，此时是派生类
			return 0;
		}

22. 使用多态的游戏程序实例，
	每个怪物都有Attack，FightBack和Hurted成员函数
		class CCreature{
			protected: int m_nLifeValue, m_nPower;
			public:
				virtual void Attack(CCreature *pCreature){}
				virtual void Hurted(int nPower){}
				virtual void FightBack(CCreature *pCreature){}
		};
		class CDragon{
			public:
				virtual void Attack(CCreature *pCreature);
				virtual void Hurted(int nPower);
				virtual void FightBack(CCreature *pCreature);
		};
		void CDragon:: Attack(CCreature *p){
			P->Hurted(m_nPower);
			p->FightBack(this);
	如果增加了新的怪物，只需要编写新的怪物类，不需要在已有的类里专门为新怪物增加void Attack(); void FightBack();成员函数，已有的类可以原封不动，节省代码。

23. 更多多态实例，
	几何形体处理程序，输入形体的数目，各形体的形状参数，要求按面积排序输出，并且输出形状
		class CShape{
			public:
				virtual double Area()=0; //纯虚函数，没有函数体
				virtual void PrintInfo()=0;
		};
		class CCircle:public CShape{
			public:
				int r;
				virtual double Area()=0; 
				virtual void PrintInfo()=0;
		};
		int MyCompare(const void *s1, const void *s2){

			double a1,a2;
			CShape **p1; //s1,s2是void*类型，不可写“ *s1 ”来取得指向的内容
			CShape **p2; 
			p1 = (CShape**)s1;  //s1,s2指向pShapes数组中的元素，数组中元素类型为CShape*
			p2 = (CShape**)s2;  //故p1,p2都是指向指针的指针，类型为CShape**
			a1 = (*p1)->Area(); // *p1的类型是CShaple*，是基态指针，此句为多态
			a2 = (*p2)->Area();
			if(a1 < a2) return -1;
			else if (a2 < a1) return 1;
			else return 0 ;
		}
		CShape *pShapes[100]; // 基类指针可以指向派生类对象
		int main(){
			int i; int n;
			CCircle *pc;
			cin >> n;
			for(i=0; i<n; i++){
				char c;
				cin >> c;
				switch(c){
					case 'R':
						pr = new CCircle();
						cin >> pr->r;
						pShapes[i] = pr;
					break;
				}
			}
		}
		qsort(pShapes, n, sizeof(CShape*), MyCompare);
		for(i=0; i<b; i++) {
			pShapes[i]-> PrintInfo();
			return 0;
		}
		如果添加新的几何形体，比如五边形，则只需从CShape派生出CPentagon，以及在main中的Switch语句中增加一个case，其余部分可以不变，多态可以增强程序的可扩充性！
		用基类指针数组存放指向各种派生类对象的指针，然后遍历该数组，就能对各个派生类对象做各种操作。
		-----------------------------------
		在非构造函数，非析构函数的成员函数中调用虚函数，是多态！在构造和析构中调用虚函数不是多态
			e.g class Base{
				public: void func1() { this->func2();} //this是基类指针，func2是虚函数，所以是多态
					virtual void func2() {cout << "base::func2()"} << endl;}
	
			}
		派生类中与基类中虚函数同名同参数表的函数，不加virtual关键字也是虚函数

24. 多态的实现原理，
	多态的关键在于通过基类指针或引用调用一个虚函数的时候，编译时不确定到底调用的是基类还是派生类的虚函数，运行时才确定--“多态联编”
	关键：虚函数表： 每一个有虚函数的类（或有虚函数的类的派生类）都有一个虚函数表，该类的任何对象中都放着虚函数表的指针，通过虚函数表指针可以找到虚函数表的地址，而在虚函数表中又列出了该类的所有虚函数的内存地址。对象中多出来的4个字节就是用来放虚函数表的地址的！
	所以多态的函数调用语句被编译成一系列根据基类指针所指向的，或基类引用所引用的对象中存放的虚函数表的地址，在虚函数表中查找虚函数地址，并调用虚函数的指令。
	每个对象都有多4个字节所以有空间上的额外开销，对多态的函数调用语句需要查找虚函数表所以有时间上的额外开销。

24. 派生类的构造函数
	虚析构函数：把基类的析构函数声明为virtual，派生类的析构函数virtual可以不进行声明，通过基类的指针，删除派生类对象时，先调用派生类的析构函数，再调用基类的析构函数。
	类如果定义了虚函数，则最好将析构函数也定义成虚函数，当然不允许以虚函数作为构造函数
	class son{
		public: virtual ~son(){ cout<< "bye from son" << endl;}
	}

25. 纯虚函数和抽象类
	纯虚函数：没有函数体的虚函数 virtual void Print() = 0;
	抽象类：包含纯虚函数的类。只能作为基类来派生新的类，不能创建抽象类的对象，非常适合多态使用
		A *pa 可以定义抽象类的指针和引用
	在抽象类中，成员函数内可以调用纯虚函数，构造/析构函数内部不可以调用
	如果一个类从抽象类派生而来，当它实现了基类中的所有纯虚函数，才能成为非抽象类 


