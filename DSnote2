栈，队列和堆 Lecture Notes --2
------------------------------------------------------------
------------------------------------------------------------
1. 栈与队列预备知识
	栈stack：先进后出的线性表。s.top()取出栈顶, s.empty()判断栈是否为空, s.push(x)入栈，s.pop()出栈, s.size()栈的存储元素个数 #include<stack>
	队列queue：先进先出的线性表。q.empty(), q.front()返回队列头部元素, q.back()返回队列尾部元素, q.pop(), q.push(x), q.size() #include<queue>

2. 使用队列实现栈
	在stack push元素时，利用临时队列调换元素次序。1.将新元素push进入临时队列 2.将原队列内容push进临时队列 3.将临时队列元素push进入原数据队列，最终得到结果（新元素在栈顶54321）
		#include<queue>
		class mystack{
		public:
			mystack() {}
			void push(int x ){
				std::queue<int> temp_queue;
				temp_queue.push(x);		//1.
				while(!_data.empty()){		//只要_data数据队列不空就循环
					temp_queue.push(_data.front());	//2.
					_data.pop();	
				}
				while(!temp_queue.empty()){	//只要临时数据队列不空就循环
					_data.push(temp_queue.front());	//3.
					temp_queue.pop();		
				}
			}

			int pop(){
				int x = data.front();		//取队列头部元素，即栈顶元素
				_data.pop();
				return x;
			}

			int top(){
				return _data.front();
			}

			int empty(){
				return _data.empty();		//_data数据队列存储元素的顺序就是栈存储元素的顺序
			}
		private:
			std::queue<int> _data;
		};

3. 使用栈实现队列
	在队列push元素时，利用临时栈调换元素次序。1.将原数据栈内容push进入临时栈 2.将新数据push进入临时栈 3.将临时栈元素push进入原数据栈 （新元素在栈底12345）
		#include<stack>
		class myqueue{
		public:
			myqueue() {}
			void push(int x ){
				std::stack<int> temp_stack;
				
				while(!_data.empty()){		//只要_data数据栈不空就循环
					temp_stack.push(_data.top());	//1.
					_data.pop();	
				}
				temp_stack.push(x);		//2. 此语句的顺序与上一题不同
				while(!temp_queue.empty()){	//只要临时数据栈不空就循环
					_data.push(temp_stack.top());	//3.
					temp_queue.pop();		
				}
			}

			int pop(){
				int x = data.top();		//取栈头部元素，弹出栈顶元素，返回元素即为队列头部元素
				_data.pop();
				return x;
			}

			int peek(){
				return _data.top();
			}

			int empty(){
				return _data.empty();		//_data数据队列存储元素的顺序就是栈存储元素的顺序
			}
		private:
			std::stack<int> _data;
		};

4. 包含main函数的栈
	需要支持返回栈内最小元素的操作getmin(), 而且操作复杂度需要是常数级O(1)
	1个变量min无法完成记录栈中所有状态下的最小值，栈的每个状态都需要有一个变量记录最小值。
	用另一个栈（最小值栈），栈顶元素存储各个状态下的最小值。
		#include<stack>
		#include<stdio.h>
		class minstack{
		public:
			minstack() {}
			void push(int x ){
				_data.push(x);			//将数据压入数据栈
				if(_min.empty()){		
					_min.push(x);		//如果最小栈为空，x直接入栈
				}
				else{			
					if(x > min.top()){	//如果新数据大于最小值栈的栈顶
						x = min.top();
					}	
					_min.push(x);		//将x push进入最小值栈
				}
			}

			int pop(){				//同时弹出数据栈和最小值栈的栈顶
				_data.pop();
				_min.pop;	
				return x;
			}

			int peek(){
				return _data.top();
			}

			int getmin(){
				return _min.top();		//getmin返回最小值栈栈顶元素
			}
		private:
			std::stack<int> _data;			//数据栈
			std::stack<int> _min;			//最小值栈
		};

5. 合法的出栈序列
	已知从1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中停留，等待后面的数字入栈出栈后，该数字再出栈，求该数字序列的出栈序列是否合法
	思路： 1.出栈结果存储在队列中 2.按元素顺序，将元素push进入栈 3.每push一个元素，检查是否与队列首部元素相同，若相同则弹出队列首元素和栈顶元素，直到两元素不同结束 4.若最终栈为空，说明序列合法，否则不合法
	使用栈与队列模拟入栈，出栈过程。
		#include<stack>
		#include<queue>
		bool check_is_valid_order(std::queue<int> &order){
			std::stack<int> s;			//s为模拟栈
			int n = order.size();
			for(int i =1; i<=n; i++){		//将1～n顺序入栈
				s.push(i);			
				while(s.top() == order.front() && !s.empty()){
					s.pop();
					order.pop();
				}
			}		
			if(!s.empty()){
				return false;
			}
			return true;
		}						//时间复杂度O(N)
		int main(){
			int n;
			int train;
			scanf("%d", &n);
			while(n){
				scanf("%d", &train);
				while(train){
					std::queue<int> order;
					order.push(train);
					for(int i=1; i<n; i++){
						scanf("%d", &train);
						order.push(train);
					}
					if(check_is_valid_order(order)){
						printf("Yes\n");
					}	
					else
						printf("No\n");
					scanf("&d", &train);
				}
				printf("\n");
				scanf("%d", &n);
			}
			return 0;
		}

6. 简单的计算器
	设计一个计算器，输入一个字符串存储的数学表达式，可以计算包括(, ), +, -四种符号的数学表达式，输入的数学表达式字符串保证是合法的。输入的数学表达式中可能存在空个字符
	两个栈，数字栈和操作符栈。使用栈处理优先级，使用一个变量compute_flag记录是否可以计算，当遇到加减号和右括号时compute_flag=1就可以计算，遇到左括号不可以计算，后面的继续入栈
		#include<string>
		#include<stack>
		class solution{
		public:
			int calculate(std::string s){
				static const int state_begin = 0;
				static const int number_state = 1;
				static const int operation_stae =  2;
				std::stack<int> number_stack;
				std::stack<char> operation_stack;
				int number = 0 ;
				int state = state_begin;
				int compuate_flag = 0;
				for(int i = 0; i<s.length(); i++){
					if(s[i] == '') {
						continue;
					}		
					switch(state){		//有限状态机，三个状态，begin，数字运算，符号运算
					case state_begin:
						if(s[i] >= '0' && s[i] <='9'){
							state = number_state;
						}
						else{
							state = operation_state;
						}
						i--;		//指针退格操作
						break;
					case number_state:
						if(s[i] >= '0' && s[i] <='9'){
							number = number*10 + s[i]-'0';
						}
						else{
							number_stack.push(number);
							if(compuate_flag == 1){
								compute(number_stack, operation_stack);
							}
							number = 0;
							i--;
							state = operation_state;
						}
						break;
					case operation_state:
						if(s[i] >= '+' && s[i] <='-'){
							operation_stack.push(s[i]);
							compuate_flag = '1';
						}
						else if(s[i] == '('){
							state = number_state;
							compuate_flag = '0';		
						}
						else if(s[i] >= '0' && s[i] <='9'){
							state = number_state;
							i--;		
						}
						else if(s[i] == ')'){
							compute(number_stack, operation_stack);		
						}
						break;
					}			
				}
				if(number != 0){
					number_stack.push(number);
					compute(number_stack, operation_stack);	
				}
				if(number == 0 && number_stack.empty()){
					return 0;
				}
				return number_stack.top();	//返回栈顶操作
			}
		};

7. 二叉堆属性
	最大/小二叉堆，即最大/小值先出的完全二叉树，搜索删除等操作都是log(n)的复杂度. 左右堆依然是最大/小堆
	STL优先级队列(二叉堆)
		std::priority queue<int> big_heap; //默认构造是最大堆
		std::priority queue<int, std::vector<int>, std::greater<int> > small_heap; //最小堆构造方法
		std::priority queue<int, std::vector<int>, std::less<int> > big_heap2; //最大堆构造方法

8. 数组中第K大的数
	已知一个未排序的数组，求这个数组中第k大的数字, 时间复杂度O(n*logk)
	维护一个k大小的最小堆，堆中元素个数小于k时，新元素直接进入堆，否则，当堆顶小于新元素时，弹出堆顶，新元素加入堆重新排序。故堆中k个元素是已扫描的元素里最大的K个，堆顶即为第k大的数
		#include<string>
		#include<stack>
		class solution{
		public:
			int findkthlargest(std::vector<int>& nums, int k){
				std::priority queue<int, std::vector<int>, std::greater<int> > Q; //最小堆
				for(int i=0; i < nums.size(); i++){	//遍历nums数组
					if(i < k) {			//如果堆中元素个数小于k，直接入堆
						Q.push(nums[i]);					
					}
					else if(Q.top < nums[i]){	//如果堆顶比新元素小，弹出堆顶，push进新元素
						Q.pop();
						Q.push(nums[i]);
					}
				}
				return Q.top(); //返回堆顶
			}
		};

9. 寻找中位数
	设计一个数据结构，该数据结构动态维护一组数据，且支持： 
		1.添加元素，void addnum(int num)将整形num添加至数据结构中
		2.返回数据的中位数，double findmedian(), 返回其维护的数据的中位数
	思路：动态维护一个最大堆与一个最小堆，最大堆存储一半数据，最小堆存储一半数据，维持最大堆的堆顶比最小堆的堆顶小（最大堆内所有元素都小于最小堆）最大堆和最小堆的堆顶决定了中位数是多少（最大堆比最小堆多一个元素时，中位数是最大堆堆顶；最大堆比最小堆少一个元素时，中位数是最小堆堆顶；两个堆数量一样时，求堆顶平均值）为了尽可能保持两个堆数量基本一致，当新元素加进来时，根据大小关系，可以将最大堆或者最小堆的堆顶push进入另一个堆中，然后新元素push进入当前堆生成新的堆顶
		void addnum(int num){
			if(big_queue.empty()){				//big_queue最大堆，small_queue最小堆
				big_queue.push(num);
				return;
			}
			if(big_queue.size == small_queue.size()){
				if(num < big_queue.top()){
					big_queue.push(num);
				}
				else{
					small_queue.push(num);
				}
			}
			else if(big_queue.size() > small_queue.size()){	
				if(num > big_queue.top()){
					small_queue.push(num);
				}
				else{					//当最大堆的数量大于最小堆，且新元素小于最大堆堆顶元素时，把最大堆堆顶元素加入最小堆，新元素加入最大堆
					small_queue.push(big_queue.top());
					big_queue.pop();
					big_queue.push(num);
				}
			}
			else if(big_queue.size() < small_queue.size()){
				if(num < big_queue.top()){
					big_queue.push(num);
				}			
				else{					////当最小堆的数量大于最大堆，且新元素大于最孝堆堆顶元素时，把最小堆堆顶元素加入最大堆，新元素加入最小堆
					big_queue.push(small_queue.top());
					small_queue.pop();
					small_queue.push(num);
				}
			}
		}
		double findmedian(){
			if(big_queue.size() == small_queue.size()){
				return (big_queue.top() + small_queue.top())/2;
			}
			else if(big_queue.size() > small_queue.size()){
				return big_queue.top();
			}
			else {
				return small_queue.top();
			}
		}
	
